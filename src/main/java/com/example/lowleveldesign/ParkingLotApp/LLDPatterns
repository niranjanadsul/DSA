ðŸ§© Step 1: Architectural Layers (Finalized)
        Controller â†’ ParkingService â†’ (Uses â†’ TicketService, VehicleService, PaymentService, ParkingSpotService)
                                â†˜ï¸Ž Uses Strategy + Factory + Observer patterns
        Repository â†’ Database (PostgreSQL)

ðŸ§  Step 2: Identify Key Design Patterns

    Weâ€™ll introduce 4 core patterns here:

    Design Pattern	Purpose	Example
    Strategy Pattern	For fare calculation â€” each vehicle type (Car, Bike, Truck)
                        can have its own pricing logic.	FareCalculationStrategy
    Factory Pattern	    To create appropriate strategy object at runtime based on vehicle type.
                        FareCalculationFactory
    Observer Pattern	For notifications (entry/exit/payment updates).
                        NotificationService (observers can be Email/SMS)
    Singleton Pattern	For ParkingLot instance (if we treat it as a single resource managing all floors).
                        ParkingLotManager